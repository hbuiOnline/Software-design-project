  // protected function userResetPwd ($userEmail){

  //   $selector = bin2hex(random_bytes(8));
  //   $token = random_bytes(32);

  //   //need to create url using heroku
  //   $url = "http://bugtrackerz2.herokuapp.com/create-new-password.php?selector=".$selector."&validator=".bin2hex($token);

  //   $expires = date("U") + 900;

  //   $sql = "DELETE FROM pwdReset WHERE pwdResetEmail = ?;";
  //   $stmt = $this->connect()->prepare($sql);
  //   if (!$stmt) {
  //     echo "There was an error";
  //     exit();
  //   }
  //   else {
  //     $stmt->execute([$userEmail]);
  //   }

  //   $sql = "INSERT INTO pwdReset (pwdResetEmail, pwdResetSelector, pwdResetToken, pwdResetExpires) VALUES (?, ?, ?, ?);";
  //   $stmt = $this->connect()->prepare($sql);
  //   if (!$stmt) {
  //     echo "There was an error";
  //     exit();
  //   }
  //   else {
  //     $hashedToken = password_hash($token, PASSWORD_DEFAULT);
  //     $stmt->execute([$userEmail, $selector, $hashedToken, $expires]);
  //   }

  //   //Need to close connection of PDO right here

  //   //code below for sending email through PHPMailer mysqlnd_ms_dump_servers
  //   // Instantiation and passing `true` enables exceptions
  //   $mail = new PHPMailer(true);

  //   try {
  //     //Server settings
  //     $mail->SMTPDebug = SMTP::DEBUG_SERVER;                      // Enable verbose debug output
  //     $mail->isSMTP();                                            // Send using SMTP
  //     $mail->Host       = 'smtp.gmail.com';                    // Set the SMTP server to send through
  //     $mail->SMTPAuth   = true;                                   // Enable SMTP authentication
  //     $mail->UserName   = 'info.viponline@gmail.com';                     // SMTP userName
  //     $mail->Password   = 'Hviponlin3';                               // SMTP password
  //     $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
  //     $mail->Port       = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above

  //     //Recipients
  //     $mail->setFrom('info.viponline@gmail.com', 'BugTracker Admin');
  //     $mail->addAddress($userEmail);     // Add a recipient

  //     // Content
  //     $mail->isHTML(true);                                  // Set email format to HTML
  //     $mail->Subject = 'Reset your password for BugTracker';
  //     // $mail->Body    = 'This is the HTML message body <b>in bold!</b>';
  //     $mail->Body    .= '<p>We received a password request. The link to reset your password is below. If you did not make this request, please ignore this email </p>';
  //     $mail->Body    .= '<p>Here is your password reset link:</br>';
  //     $mail->Body    .= '<a href="'.$url.'">'.$url.'</a></p>';


  //     if($mail->send()){
  //       echo 'Message has been sent';
  //     }
  //     else {
  //       echo 'ERROR sending email';
  //     }
  //     $mail->smtpClose();
  //     header("Location: ../reset-password.php?reset=success");

  //   } catch (Exception $e) {
  //     echo "Message could not be sent. Mailer Error: {$mail->ErrorInfo}";
  //   }

  // }//End of userResetPwd

    protected function userCredentialsRoleAssign($userCredentialselect, $userRole){

    $sql = "UPDATE userCredentials SET userCredentialsRole = ? WHERE idUserCredentials = ?;";
    $stmt = $this->connect()->prepare($sql);
    if (!$stmt) {
      header("Location: ../userCredentials.php?error=sqlerror");
      exit();
    }
    else {
      $stmt->execute([$userRole, $userCredentialselect]);
      header("Location: ../userCredentials.php?roleassign=success");
      exit();
    }
    $this->connect()->null;

  }

} //End of class